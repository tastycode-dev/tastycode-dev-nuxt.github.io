[{"data":1,"prerenderedAt":1390},["Reactive",2],{"content-query-H8prIUMV1J":3},{"_path":4,"_dir":5,"_draft":6,"_partial":6,"_locale":7,"_empty":6,"title":8,"description":9,"author":10,"date":11,"body":12,"_type":1385,"_id":1386,"_source":1387,"_file":1388,"_extension":1389},"/blog/tasty-cpp-inside-of-std-string","blog",false,"","Tasty C++ – Memory Layout of std::string","For a professional C++ developer, it's crucial to understand memory organization of the data\nstructures and complexity of their operations. This is especially important when working with the\nC++ Standard Library. In this post of Tasty C++ series we'll look under the hood of std::string,\nso that you can work with C++ strings more effectively when designing your code and data structures.","Oleksandr Gituliar","2023-08-07T00:00:00.000Z",{"type":13,"children":14,"toc":1379},"root",[15,31,56,68,75,86,122,148,153,269,305,323,390,446,452,464,469,723,728,734,798,805,937,942,949,1076,1081,1088,1215,1220,1226,1237,1306,1311,1316,1324,1369,1374],{"type":16,"tag":17,"props":18,"children":19},"element","p",{},[20,23,29],{"type":21,"value":22},"text","For a professional C++ developer, it's crucial to understand memory organization of the data\nstructures and complexity of their operations. This is especially important when working with the\nC++ Standard Library. In this post of Tasty C++ series we'll look under the hood of ",{"type":16,"tag":24,"props":25,"children":26},"code-inline",{},[27],{"type":21,"value":28},"std::string",{"type":21,"value":30},",\nso that you can work with C++ strings more effectively when designing your code and data structures.",{"type":16,"tag":17,"props":32,"children":33},{},[34,36,40,42,48,50,54],{"type":21,"value":35},"In C++, ",{"type":16,"tag":24,"props":37,"children":38},{},[39],{"type":21,"value":28},{"type":21,"value":41}," is a sequence of characters that are stored in the buffer that spans a\n",{"type":16,"tag":43,"props":44,"children":45},"em",{},[46],{"type":21,"value":47},"contiguous",{"type":21,"value":49}," memory area. This means that individual characters can be efficiently accessed by index\nat O(1) time. The C++ Standard imposes other requirements on the complexity of common operations\nwith strings. However, it doesn't specify how exactly ",{"type":16,"tag":24,"props":51,"children":52},{},[53],{"type":21,"value":28},{"type":21,"value":55}," should be implemented.",{"type":16,"tag":17,"props":57,"children":58},{},[59,61,66],{"type":21,"value":60},"In practice, various implementations of the C++ Standard Library use considerably different\napproaches. For example, the result of ",{"type":16,"tag":24,"props":62,"children":63},{},[64],{"type":21,"value":65},"sizeof(std::string)",{"type":21,"value":67}," depends on what library is used.",{"type":16,"tag":69,"props":70,"children":72},"h2",{"id":71},"long-strings",[73],{"type":21,"value":74},"Long Strings",{"type":16,"tag":17,"props":76,"children":77},{},[78,80,84],{"type":21,"value":79},"Usually, to fully represent its internal state, ",{"type":16,"tag":24,"props":81,"children":82},{},[83],{"type":21,"value":28},{"type":21,"value":85}," needs three pieces of information:",{"type":16,"tag":87,"props":88,"children":89},"ul",{},[90,102,112],{"type":16,"tag":91,"props":92,"children":93},"li",{},[94,100],{"type":16,"tag":95,"props":96,"children":97},"strong",{},[98],{"type":21,"value":99},"Size",{"type":21,"value":101}," – the current number of characters in the string.",{"type":16,"tag":91,"props":103,"children":104},{},[105,110],{"type":16,"tag":95,"props":106,"children":107},{},[108],{"type":21,"value":109},"Buffer",{"type":21,"value":111}," – the pointer to the memory buffer where characters are stored.",{"type":16,"tag":91,"props":113,"children":114},{},[115,120],{"type":16,"tag":95,"props":116,"children":117},{},[118],{"type":21,"value":119},"Capacity",{"type":21,"value":121}," – the max number of character the buffer can fit.",{"type":16,"tag":17,"props":123,"children":124},{},[125,127,132,134,139,141,146],{"type":21,"value":126},"In fact, the ",{"type":16,"tag":43,"props":128,"children":129},{},[130],{"type":21,"value":131},"capacity",{"type":21,"value":133}," is not required. We can use ",{"type":16,"tag":43,"props":135,"children":136},{},[137],{"type":21,"value":138},"size",{"type":21,"value":140}," and ",{"type":16,"tag":43,"props":142,"children":143},{},[144],{"type":21,"value":145},"buffer",{"type":21,"value":147}," only, but when the string\ngrows, a new buffer should be allocated on the heap (because we can't tell how many extra characters\nthe current buffer can fit). Since heap allocation is slow, such allocations are avoided by tracking\nthe buffer capacity.",{"type":16,"tag":17,"props":149,"children":150},{},[151],{"type":21,"value":152},"Following this logic, we could implement a C++ string as:",{"type":16,"tag":154,"props":155,"children":160},"code",{"className":156,"code":158,"language":159,"meta":7},[157],"language-cpp","class MyString {\n    size_t    m_size;\n    char *    m_buffer;\n    size_t    m_capacity;\n}\n","cpp",[161],{"type":16,"tag":162,"props":163,"children":164},"pre",{},[165],{"type":16,"tag":154,"props":166,"children":167},{"__ignoreMap":7},[168,197,216,243,260],{"type":16,"tag":169,"props":170,"children":173},"span",{"class":171,"line":172},"line",1,[174,180,186,192],{"type":16,"tag":169,"props":175,"children":177},{"class":176},"ct-748473",[178],{"type":21,"value":179},"class",{"type":16,"tag":169,"props":181,"children":183},{"class":182},"ct-996399",[184],{"type":21,"value":185}," ",{"type":16,"tag":169,"props":187,"children":189},{"class":188},"ct-970031",[190],{"type":21,"value":191},"MyString",{"type":16,"tag":169,"props":193,"children":194},{"class":182},[195],{"type":21,"value":196}," {\n",{"type":16,"tag":169,"props":198,"children":200},{"class":171,"line":199},2,[201,206,211],{"type":16,"tag":169,"props":202,"children":203},{"class":182},[204],{"type":21,"value":205},"    ",{"type":16,"tag":169,"props":207,"children":208},{"class":176},[209],{"type":21,"value":210},"size_t",{"type":16,"tag":169,"props":212,"children":213},{"class":182},[214],{"type":21,"value":215},"    m_size;\n",{"type":16,"tag":169,"props":217,"children":219},{"class":171,"line":218},3,[220,224,229,233,238],{"type":16,"tag":169,"props":221,"children":222},{"class":182},[223],{"type":21,"value":205},{"type":16,"tag":169,"props":225,"children":226},{"class":176},[227],{"type":21,"value":228},"char",{"type":16,"tag":169,"props":230,"children":231},{"class":182},[232],{"type":21,"value":185},{"type":16,"tag":169,"props":234,"children":235},{"class":176},[236],{"type":21,"value":237},"*",{"type":16,"tag":169,"props":239,"children":240},{"class":182},[241],{"type":21,"value":242},"    m_buffer;\n",{"type":16,"tag":169,"props":244,"children":246},{"class":171,"line":245},4,[247,251,255],{"type":16,"tag":169,"props":248,"children":249},{"class":182},[250],{"type":21,"value":205},{"type":16,"tag":169,"props":252,"children":253},{"class":176},[254],{"type":21,"value":210},{"type":16,"tag":169,"props":256,"children":257},{"class":182},[258],{"type":21,"value":259},"    m_capacity;\n",{"type":16,"tag":169,"props":261,"children":263},{"class":171,"line":262},5,[264],{"type":16,"tag":169,"props":265,"children":266},{"class":182},[267],{"type":21,"value":268},"}",{"type":16,"tag":17,"props":270,"children":271},{},[272,276,278,283,285,290,292,296,298,303],{"type":16,"tag":24,"props":273,"children":274},{},[275],{"type":21,"value":191},{"type":21,"value":277}," occupies 24 bytes, which is only 3x more than ",{"type":16,"tag":95,"props":279,"children":280},{},[281],{"type":21,"value":282},"fundamental types",{"type":21,"value":284}," such as ",{"type":16,"tag":24,"props":286,"children":287},{},[288],{"type":21,"value":289},"void *",{"type":21,"value":291},",\n",{"type":16,"tag":24,"props":293,"children":294},{},[295],{"type":21,"value":210},{"type":21,"value":297},", or ",{"type":16,"tag":24,"props":299,"children":300},{},[301],{"type":21,"value":302},"double",{"type":21,"value":304},".",{"type":16,"tag":17,"props":306,"children":307},{},[308,310,315,317,321],{"type":21,"value":309},"Let's see how things look in reality. In the ",{"type":16,"tag":43,"props":311,"children":312},{},[313],{"type":21,"value":314},"most popular implementations",{"type":21,"value":316}," of the C++ Standard\nLibrary the size of ",{"type":16,"tag":24,"props":318,"children":319},{},[320],{"type":21,"value":28},{"type":21,"value":322}," object is the following:",{"type":16,"tag":324,"props":325,"children":326},"table",{},[327,347],{"type":16,"tag":328,"props":329,"children":330},"thead",{},[331],{"type":16,"tag":332,"props":333,"children":334},"tr",{},[335,342],{"type":16,"tag":336,"props":337,"children":339},"th",{"align":338},null,[340],{"type":21,"value":341},"C++ Standard Library",{"type":16,"tag":336,"props":343,"children":344},{"align":338},[345],{"type":21,"value":346},"Size of std::string()",{"type":16,"tag":348,"props":349,"children":350},"tbody",{},[351,365,377],{"type":16,"tag":332,"props":352,"children":353},{},[354,360],{"type":16,"tag":355,"props":356,"children":357},"td",{"align":338},[358],{"type":21,"value":359},"MSVC STL",{"type":16,"tag":355,"props":361,"children":362},{"align":338},[363],{"type":21,"value":364},"32 bytes",{"type":16,"tag":332,"props":366,"children":367},{},[368,373],{"type":16,"tag":355,"props":369,"children":370},{"align":338},[371],{"type":21,"value":372},"GCC libstdc++",{"type":16,"tag":355,"props":374,"children":375},{"align":338},[376],{"type":21,"value":364},{"type":16,"tag":332,"props":378,"children":379},{},[380,385],{"type":16,"tag":355,"props":381,"children":382},{"align":338},[383],{"type":21,"value":384},"LLVM libc++",{"type":16,"tag":355,"props":386,"children":387},{"align":338},[388],{"type":21,"value":389},"24 bytes",{"type":16,"tag":17,"props":391,"children":392},{},[393,395,400,402,406,408,412,414,419,420,425,427,431,433,438,440,444],{"type":21,"value":394},"To our surprise, only ",{"type":16,"tag":95,"props":396,"children":397},{},[398],{"type":21,"value":399},"LLVM",{"type":21,"value":401}," allocates expected ",{"type":16,"tag":95,"props":403,"children":404},{},[405],{"type":21,"value":389},{"type":21,"value":407}," for ",{"type":16,"tag":24,"props":409,"children":410},{},[411],{"type":21,"value":28},{"type":21,"value":413},". The other two,\n",{"type":16,"tag":95,"props":415,"children":416},{},[417],{"type":21,"value":418},"MSVC",{"type":21,"value":140},{"type":16,"tag":95,"props":421,"children":422},{},[423],{"type":21,"value":424},"GCC",{"type":21,"value":426},", allocate ",{"type":16,"tag":95,"props":428,"children":429},{},[430],{"type":21,"value":364},{"type":21,"value":432}," for the same string. (For completeness, note that in the\n",{"type":16,"tag":43,"props":434,"children":435},{},[436],{"type":21,"value":437},"debug mode",{"type":21,"value":439}," MSVC allocates 40 bytes for ",{"type":16,"tag":24,"props":441,"children":442},{},[443],{"type":21,"value":28},{"type":21,"value":445},".)",{"type":16,"tag":69,"props":447,"children":449},{"id":448},"short-strings",[450],{"type":21,"value":451},"Short Strings",{"type":16,"tag":17,"props":453,"children":454},{},[455,457,462],{"type":21,"value":456},"Let's get some intuition about why various implementation allocate different amount of memory for\nthe same object. In fact, 24 or 32 bytes is already enough to fit a relatively big string, with no\nneed to allocate dynamic memory (and free it afterwards, which is costly as well). The trick, called\n",{"type":16,"tag":95,"props":458,"children":459},{},[460],{"type":21,"value":461},"Small String Optimization",{"type":21,"value":463}," (aka SSO), is to store string characters in the memory dedicated for\nthe size, capacity, and data pointer fields. Not sure this technique is part of the C++ Standard,\nbut for sure it's popular among various implementations.",{"type":16,"tag":17,"props":465,"children":466},{},[467],{"type":21,"value":468},"Without going into much technicalities of SSO, let's mention two points worth to remember.",{"type":16,"tag":470,"props":471,"children":472},"ol",{},[473,573],{"type":16,"tag":91,"props":474,"children":475},{},[476,481,483,487,489,497,499,503,506,562],{"type":16,"tag":95,"props":477,"children":478},{},[479],{"type":21,"value":480},"How big are short strings?",{"type":21,"value":482}," It seems obvious that every implementation is free to extend\ninternal buffer for a small string far beyond required 24 bytes. This is why ",{"type":16,"tag":24,"props":484,"children":485},{},[486],{"type":21,"value":28},{"type":21,"value":488}," in\nMSVC and GCC is 32 bytes. However, the result of ",{"type":16,"tag":95,"props":490,"children":491},{},[492],{"type":16,"tag":24,"props":493,"children":494},{},[495],{"type":21,"value":496},"std::string().capacity()",{"type":21,"value":498}," is:",{"type":16,"tag":500,"props":501,"children":502},"br",{},[],{"type":16,"tag":500,"props":504,"children":505},{},[],{"type":16,"tag":324,"props":507,"children":508},{},[509,524],{"type":16,"tag":328,"props":510,"children":511},{},[512],{"type":16,"tag":332,"props":513,"children":514},{},[515,519],{"type":16,"tag":336,"props":516,"children":517},{"align":338},[518],{"type":21,"value":341},{"type":16,"tag":336,"props":520,"children":521},{"align":338},[522],{"type":21,"value":523},"Capacity of std::string()",{"type":16,"tag":348,"props":525,"children":526},{},[527,539,550],{"type":16,"tag":332,"props":528,"children":529},{},[530,534],{"type":16,"tag":355,"props":531,"children":532},{"align":338},[533],{"type":21,"value":359},{"type":16,"tag":355,"props":535,"children":536},{"align":338},[537],{"type":21,"value":538},"15 chars",{"type":16,"tag":332,"props":540,"children":541},{},[542,546],{"type":16,"tag":355,"props":543,"children":544},{"align":338},[545],{"type":21,"value":372},{"type":16,"tag":355,"props":547,"children":548},{"align":338},[549],{"type":21,"value":538},{"type":16,"tag":332,"props":551,"children":552},{},[553,557],{"type":16,"tag":355,"props":554,"children":555},{"align":338},[556],{"type":21,"value":384},{"type":16,"tag":355,"props":558,"children":559},{"align":338},[560],{"type":21,"value":561},"22 chars",{"type":16,"tag":17,"props":563,"children":564},{},[565,567,572],{"type":21,"value":566},"Again, LLVM version seems to beat MSVC and GCC, since for a smaller memory usage (24 bytes) it's\nable to store longer strings (22 chars). (In fact, it's possible to fully utilize the memory and\nfit 23 chars + ",{"type":16,"tag":24,"props":568,"children":569},{},[570],{"type":21,"value":571},"'\\0'",{"type":21,"value":445},{"type":16,"tag":91,"props":574,"children":575},{},[576,581,583,588,590,593,596,612,632,671,687],{"type":16,"tag":95,"props":577,"children":578},{},[579],{"type":21,"value":580},"How fast are short strings?",{"type":21,"value":582}," In this particular case, utilizing more space is not for\nfree. The more characters we pack into a string's memory area, the more CPU operations we have to\nrun. For LLVM, with its superior memory efficiency, even such a simple call as ",{"type":16,"tag":24,"props":584,"children":585},{},[586],{"type":21,"value":587},"size()",{"type":21,"value":589}," requires\nto check if the string is short or long. This sort of conditions might slow down a calculation\npipeline.",{"type":16,"tag":500,"props":591,"children":592},{},[],{"type":16,"tag":500,"props":594,"children":595},{},[],{"type":16,"tag":17,"props":597,"children":598},{},[599,601,605,607,611],{"type":21,"value":600},"A simple example of ",{"type":16,"tag":24,"props":602,"children":603},{},[604],{"type":21,"value":587},{"type":21,"value":606}," method clearly demonstrates this point. (BTW, this is one of\nthe most commonly used method of ",{"type":16,"tag":24,"props":608,"children":609},{},[610],{"type":21,"value":28},{"type":21,"value":445},{"type":16,"tag":17,"props":613,"children":614},{},[615,620,622,630],{"type":16,"tag":95,"props":616,"children":617},{},[618],{"type":21,"value":619},"GCC stdlibc++",{"type":21,"value":621}," code (see ",{"type":16,"tag":623,"props":624,"children":628},"a",{"href":625,"rel":626},"https://godbolt.org/z/7nYe9rWdE",[627],"nofollow",[629],{"type":21,"value":625},{"type":21,"value":631},") directly copies string's size into\nthe output register:",{"type":16,"tag":324,"props":633,"children":634},{},[635,650],{"type":16,"tag":328,"props":636,"children":637},{},[638],{"type":16,"tag":332,"props":639,"children":640},{},[641,646],{"type":16,"tag":336,"props":642,"children":643},{"align":338},[644],{"type":21,"value":645},"Example",{"type":16,"tag":336,"props":647,"children":648},{"align":338},[649],{"type":21,"value":372},{"type":16,"tag":348,"props":651,"children":652},{},[653],{"type":16,"tag":332,"props":654,"children":655},{},[656,664],{"type":16,"tag":355,"props":657,"children":658},{"align":338},[659],{"type":16,"tag":660,"props":661,"children":663},"img",{"src":662},"/img/string-size-src.png",[],{"type":16,"tag":355,"props":665,"children":666},{"align":338},[667],{"type":16,"tag":660,"props":668,"children":670},{"src":669},"/img/string-size-gcc.png",[],{"type":16,"tag":17,"props":672,"children":673},{},[674,678,679,685],{"type":16,"tag":95,"props":675,"children":676},{},[677],{"type":21,"value":384},{"type":21,"value":621},{"type":16,"tag":623,"props":680,"children":683},{"href":681,"rel":682},"https://godbolt.org/z/xM349cG5P",[627],[684],{"type":21,"value":681},{"type":21,"value":686},") at first checks if the string is short\nand then calculates its size.",{"type":16,"tag":324,"props":688,"children":689},{},[690,704],{"type":16,"tag":328,"props":691,"children":692},{},[693],{"type":16,"tag":332,"props":694,"children":695},{},[696,700],{"type":16,"tag":336,"props":697,"children":698},{"align":338},[699],{"type":21,"value":645},{"type":16,"tag":336,"props":701,"children":702},{"align":338},[703],{"type":21,"value":384},{"type":16,"tag":348,"props":705,"children":706},{},[707],{"type":16,"tag":332,"props":708,"children":709},{},[710,716],{"type":16,"tag":355,"props":711,"children":712},{"align":338},[713],{"type":16,"tag":660,"props":714,"children":715},{"src":662},[],{"type":16,"tag":355,"props":717,"children":718},{"align":338},[719],{"type":16,"tag":660,"props":720,"children":722},{"src":721},"/img/string-size-llvm.png",[],{"type":16,"tag":17,"props":724,"children":725},{},[726],{"type":21,"value":727},"Eventually, it's hard to say which approach is more efficient. Now, that you know the difference,\nthe best advice here is to experiment with various implementations and benchmark your particular use\ncase.",{"type":16,"tag":69,"props":729,"children":731},{"id":730},"memory-allocation-policy",[732],{"type":21,"value":733},"Memory Allocation Policy",{"type":16,"tag":17,"props":735,"children":736},{},[737,739,743,745,752,754,759,760,765,767,771,773,778,780,784,785,789,791,796],{"type":21,"value":738},"Finally, let's see how ",{"type":16,"tag":24,"props":740,"children":741},{},[742],{"type":21,"value":28},{"type":21,"value":744}," grows its internal buffer when it's time to allocate more\nmemory. Some ",{"type":16,"tag":623,"props":746,"children":749},{"href":747,"rel":748},"https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/include/bits/basic_string.tcc#L142",[627],[750],{"type":21,"value":751},"comments in the GCC\nsources",{"type":21,"value":753},",\nmentioned ",{"type":16,"tag":43,"props":755,"children":756},{},[757],{"type":21,"value":758},"amortized linear time requirement",{"type":21,"value":140},{"type":16,"tag":43,"props":761,"children":762},{},[763],{"type":21,"value":764},"exponential growth policy",{"type":21,"value":766},". Not clear if this is\ninternal GCC decision or part of the C++ Standard. In any case, all three implementations use\nexponential growth, so that ",{"type":16,"tag":95,"props":768,"children":769},{},[770],{"type":21,"value":418},{"type":21,"value":772}," has ",{"type":16,"tag":95,"props":774,"children":775},{},[776],{"type":21,"value":777},"1.5x factor",{"type":21,"value":779}," growth, while ",{"type":16,"tag":95,"props":781,"children":782},{},[783],{"type":21,"value":424},{"type":21,"value":140},{"type":16,"tag":95,"props":786,"children":787},{},[788],{"type":21,"value":399},{"type":21,"value":790}," use ",{"type":16,"tag":95,"props":792,"children":793},{},[794],{"type":21,"value":795},"2x\nfactor",{"type":21,"value":797},". Below are some examples with more explicit (but simplified) code:",{"type":16,"tag":17,"props":799,"children":800},{},[801],{"type":16,"tag":95,"props":802,"children":803},{},[804],{"type":21,"value":359},{"type":16,"tag":154,"props":806,"children":809},{"className":807,"code":808,"language":159,"meta":7},[157],"size_t newCapacity(size_t newSize, size_t oldCap) {\n    return max(newSize, oldCap + oldCap / 2);\n}\n",[810],{"type":16,"tag":162,"props":811,"children":812},{},[813],{"type":16,"tag":154,"props":814,"children":815},{"__ignoreMap":7},[816,874,930],{"type":16,"tag":169,"props":817,"children":818},{"class":171,"line":172},[819,823,827,832,837,841,845,851,856,860,864,869],{"type":16,"tag":169,"props":820,"children":821},{"class":176},[822],{"type":21,"value":210},{"type":16,"tag":169,"props":824,"children":825},{"class":182},[826],{"type":21,"value":185},{"type":16,"tag":169,"props":828,"children":829},{"class":188},[830],{"type":21,"value":831},"newCapacity",{"type":16,"tag":169,"props":833,"children":834},{"class":182},[835],{"type":21,"value":836},"(",{"type":16,"tag":169,"props":838,"children":839},{"class":176},[840],{"type":21,"value":210},{"type":16,"tag":169,"props":842,"children":843},{"class":182},[844],{"type":21,"value":185},{"type":16,"tag":169,"props":846,"children":848},{"class":847},"ct-441542",[849],{"type":21,"value":850},"newSize",{"type":16,"tag":169,"props":852,"children":853},{"class":182},[854],{"type":21,"value":855},", ",{"type":16,"tag":169,"props":857,"children":858},{"class":176},[859],{"type":21,"value":210},{"type":16,"tag":169,"props":861,"children":862},{"class":182},[863],{"type":21,"value":185},{"type":16,"tag":169,"props":865,"children":866},{"class":847},[867],{"type":21,"value":868},"oldCap",{"type":16,"tag":169,"props":870,"children":871},{"class":182},[872],{"type":21,"value":873},") {\n",{"type":16,"tag":169,"props":875,"children":876},{"class":171,"line":199},[877,881,886,890,895,900,905,910,915,919,925],{"type":16,"tag":169,"props":878,"children":879},{"class":182},[880],{"type":21,"value":205},{"type":16,"tag":169,"props":882,"children":883},{"class":176},[884],{"type":21,"value":885},"return",{"type":16,"tag":169,"props":887,"children":888},{"class":182},[889],{"type":21,"value":185},{"type":16,"tag":169,"props":891,"children":892},{"class":188},[893],{"type":21,"value":894},"max",{"type":16,"tag":169,"props":896,"children":897},{"class":182},[898],{"type":21,"value":899},"(newSize, oldCap ",{"type":16,"tag":169,"props":901,"children":902},{"class":176},[903],{"type":21,"value":904},"+",{"type":16,"tag":169,"props":906,"children":907},{"class":182},[908],{"type":21,"value":909}," oldCap ",{"type":16,"tag":169,"props":911,"children":912},{"class":176},[913],{"type":21,"value":914},"/",{"type":16,"tag":169,"props":916,"children":917},{"class":182},[918],{"type":21,"value":185},{"type":16,"tag":169,"props":920,"children":922},{"class":921},"ct-531245",[923],{"type":21,"value":924},"2",{"type":16,"tag":169,"props":926,"children":927},{"class":182},[928],{"type":21,"value":929},");\n",{"type":16,"tag":169,"props":931,"children":932},{"class":171,"line":218},[933],{"type":16,"tag":169,"props":934,"children":935},{"class":182},[936],{"type":21,"value":268},{"type":16,"tag":17,"props":938,"children":939},{},[940],{"type":21,"value":941},"Example: 15, 31, 47, 70, 105, 157, 235, 352, 528, 792, 1'188, 1'782, 2'673, 4'009.",{"type":16,"tag":17,"props":943,"children":944},{},[945],{"type":16,"tag":95,"props":946,"children":947},{},[948],{"type":21,"value":372},{"type":16,"tag":154,"props":950,"children":953},{"className":951,"code":952,"language":159,"meta":7},[157],"size_t newCapacity(size_t newSize, size_t oldCap) {\n    return max(newSize + 1, 2 * oldCap);\n}\n",[954],{"type":16,"tag":162,"props":955,"children":956},{},[957],{"type":16,"tag":154,"props":958,"children":959},{"__ignoreMap":7},[960,1011,1069],{"type":16,"tag":169,"props":961,"children":962},{"class":171,"line":172},[963,967,971,975,979,983,987,991,995,999,1003,1007],{"type":16,"tag":169,"props":964,"children":965},{"class":176},[966],{"type":21,"value":210},{"type":16,"tag":169,"props":968,"children":969},{"class":182},[970],{"type":21,"value":185},{"type":16,"tag":169,"props":972,"children":973},{"class":188},[974],{"type":21,"value":831},{"type":16,"tag":169,"props":976,"children":977},{"class":182},[978],{"type":21,"value":836},{"type":16,"tag":169,"props":980,"children":981},{"class":176},[982],{"type":21,"value":210},{"type":16,"tag":169,"props":984,"children":985},{"class":182},[986],{"type":21,"value":185},{"type":16,"tag":169,"props":988,"children":989},{"class":847},[990],{"type":21,"value":850},{"type":16,"tag":169,"props":992,"children":993},{"class":182},[994],{"type":21,"value":855},{"type":16,"tag":169,"props":996,"children":997},{"class":176},[998],{"type":21,"value":210},{"type":16,"tag":169,"props":1000,"children":1001},{"class":182},[1002],{"type":21,"value":185},{"type":16,"tag":169,"props":1004,"children":1005},{"class":847},[1006],{"type":21,"value":868},{"type":16,"tag":169,"props":1008,"children":1009},{"class":182},[1010],{"type":21,"value":873},{"type":16,"tag":169,"props":1012,"children":1013},{"class":171,"line":199},[1014,1018,1022,1026,1030,1035,1039,1043,1048,1052,1056,1060,1064],{"type":16,"tag":169,"props":1015,"children":1016},{"class":182},[1017],{"type":21,"value":205},{"type":16,"tag":169,"props":1019,"children":1020},{"class":176},[1021],{"type":21,"value":885},{"type":16,"tag":169,"props":1023,"children":1024},{"class":182},[1025],{"type":21,"value":185},{"type":16,"tag":169,"props":1027,"children":1028},{"class":188},[1029],{"type":21,"value":894},{"type":16,"tag":169,"props":1031,"children":1032},{"class":182},[1033],{"type":21,"value":1034},"(newSize ",{"type":16,"tag":169,"props":1036,"children":1037},{"class":176},[1038],{"type":21,"value":904},{"type":16,"tag":169,"props":1040,"children":1041},{"class":182},[1042],{"type":21,"value":185},{"type":16,"tag":169,"props":1044,"children":1045},{"class":921},[1046],{"type":21,"value":1047},"1",{"type":16,"tag":169,"props":1049,"children":1050},{"class":182},[1051],{"type":21,"value":855},{"type":16,"tag":169,"props":1053,"children":1054},{"class":921},[1055],{"type":21,"value":924},{"type":16,"tag":169,"props":1057,"children":1058},{"class":182},[1059],{"type":21,"value":185},{"type":16,"tag":169,"props":1061,"children":1062},{"class":176},[1063],{"type":21,"value":237},{"type":16,"tag":169,"props":1065,"children":1066},{"class":182},[1067],{"type":21,"value":1068}," oldCap);\n",{"type":16,"tag":169,"props":1070,"children":1071},{"class":171,"line":218},[1072],{"type":16,"tag":169,"props":1073,"children":1074},{"class":182},[1075],{"type":21,"value":268},{"type":16,"tag":17,"props":1077,"children":1078},{},[1079],{"type":21,"value":1080},"Example: 15, 30, 60, 120, 240, 480, 960, 1'920, 3'840, 7'680, 15'360, 30'720.",{"type":16,"tag":17,"props":1082,"children":1083},{},[1084],{"type":16,"tag":95,"props":1085,"children":1086},{},[1087],{"type":21,"value":384},{"type":16,"tag":154,"props":1089,"children":1092},{"className":1090,"code":1091,"language":159,"meta":7},[157],"size_t newCapacity(size_t newSize, size_t oldCap) {\n    return max(newSize, 2 * oldCap) + 1;\n}\n",[1093],{"type":16,"tag":162,"props":1094,"children":1095},{},[1096],{"type":16,"tag":154,"props":1097,"children":1098},{"__ignoreMap":7},[1099,1150,1208],{"type":16,"tag":169,"props":1100,"children":1101},{"class":171,"line":172},[1102,1106,1110,1114,1118,1122,1126,1130,1134,1138,1142,1146],{"type":16,"tag":169,"props":1103,"children":1104},{"class":176},[1105],{"type":21,"value":210},{"type":16,"tag":169,"props":1107,"children":1108},{"class":182},[1109],{"type":21,"value":185},{"type":16,"tag":169,"props":1111,"children":1112},{"class":188},[1113],{"type":21,"value":831},{"type":16,"tag":169,"props":1115,"children":1116},{"class":182},[1117],{"type":21,"value":836},{"type":16,"tag":169,"props":1119,"children":1120},{"class":176},[1121],{"type":21,"value":210},{"type":16,"tag":169,"props":1123,"children":1124},{"class":182},[1125],{"type":21,"value":185},{"type":16,"tag":169,"props":1127,"children":1128},{"class":847},[1129],{"type":21,"value":850},{"type":16,"tag":169,"props":1131,"children":1132},{"class":182},[1133],{"type":21,"value":855},{"type":16,"tag":169,"props":1135,"children":1136},{"class":176},[1137],{"type":21,"value":210},{"type":16,"tag":169,"props":1139,"children":1140},{"class":182},[1141],{"type":21,"value":185},{"type":16,"tag":169,"props":1143,"children":1144},{"class":847},[1145],{"type":21,"value":868},{"type":16,"tag":169,"props":1147,"children":1148},{"class":182},[1149],{"type":21,"value":873},{"type":16,"tag":169,"props":1151,"children":1152},{"class":171,"line":199},[1153,1157,1161,1165,1169,1174,1178,1182,1186,1191,1195,1199,1203],{"type":16,"tag":169,"props":1154,"children":1155},{"class":182},[1156],{"type":21,"value":205},{"type":16,"tag":169,"props":1158,"children":1159},{"class":176},[1160],{"type":21,"value":885},{"type":16,"tag":169,"props":1162,"children":1163},{"class":182},[1164],{"type":21,"value":185},{"type":16,"tag":169,"props":1166,"children":1167},{"class":188},[1168],{"type":21,"value":894},{"type":16,"tag":169,"props":1170,"children":1171},{"class":182},[1172],{"type":21,"value":1173},"(newSize, ",{"type":16,"tag":169,"props":1175,"children":1176},{"class":921},[1177],{"type":21,"value":924},{"type":16,"tag":169,"props":1179,"children":1180},{"class":182},[1181],{"type":21,"value":185},{"type":16,"tag":169,"props":1183,"children":1184},{"class":176},[1185],{"type":21,"value":237},{"type":16,"tag":169,"props":1187,"children":1188},{"class":182},[1189],{"type":21,"value":1190}," oldCap) ",{"type":16,"tag":169,"props":1192,"children":1193},{"class":176},[1194],{"type":21,"value":904},{"type":16,"tag":169,"props":1196,"children":1197},{"class":182},[1198],{"type":21,"value":185},{"type":16,"tag":169,"props":1200,"children":1201},{"class":921},[1202],{"type":21,"value":1047},{"type":16,"tag":169,"props":1204,"children":1205},{"class":182},[1206],{"type":21,"value":1207},";\n",{"type":16,"tag":169,"props":1209,"children":1210},{"class":171,"line":218},[1211],{"type":16,"tag":169,"props":1212,"children":1213},{"class":182},[1214],{"type":21,"value":268},{"type":16,"tag":17,"props":1216,"children":1217},{},[1218],{"type":21,"value":1219},"Example: 22, 47, 95, 191, 383, 767, 1'535, 3'071, 6'143, 12'287, 24'575, 49'151.",{"type":16,"tag":69,"props":1221,"children":1223},{"id":1222},"summary",[1224],{"type":21,"value":1225},"Summary",{"type":16,"tag":17,"props":1227,"children":1228},{},[1229,1231,1235],{"type":21,"value":1230},"Because the C++ Standard doesn't provide specific implementation details for ",{"type":16,"tag":24,"props":1232,"children":1233},{},[1234],{"type":21,"value":28},{"type":21,"value":1236},", there\nare a couple of tradeoffs for the developer of the C++ Standard Library to consider:",{"type":16,"tag":87,"props":1238,"children":1239},{},[1240,1261,1283],{"type":16,"tag":91,"props":1241,"children":1242},{},[1243,1247,1249,1253,1255,1259],{"type":16,"tag":95,"props":1244,"children":1245},{},[1246],{"type":21,"value":99},{"type":21,"value":1248},": ",{"type":16,"tag":43,"props":1250,"children":1251},{},[1252],{"type":21,"value":389},{"type":21,"value":1254}," (LLVM) vs ",{"type":16,"tag":43,"props":1256,"children":1257},{},[1258],{"type":21,"value":364},{"type":21,"value":1260}," (GCC, MSVC)",{"type":16,"tag":91,"props":1262,"children":1263},{},[1264,1268,1269,1274,1276,1281],{"type":16,"tag":95,"props":1265,"children":1266},{},[1267],{"type":21,"value":119},{"type":21,"value":1248},{"type":16,"tag":43,"props":1270,"children":1271},{},[1272],{"type":21,"value":1273},"15 chars + Simple Code",{"type":21,"value":1275}," (GCC, MSVC) vs ",{"type":16,"tag":43,"props":1277,"children":1278},{},[1279],{"type":21,"value":1280},"22 chars + Complex Code",{"type":21,"value":1282}," (LLVM)",{"type":16,"tag":91,"props":1284,"children":1285},{},[1286,1291,1293,1297,1299,1304],{"type":16,"tag":95,"props":1287,"children":1288},{},[1289],{"type":21,"value":1290},"Growth Policy",{"type":21,"value":1292},": Exponential with ",{"type":16,"tag":43,"props":1294,"children":1295},{},[1296],{"type":21,"value":777},{"type":21,"value":1298}," (MSVC) vs ",{"type":16,"tag":43,"props":1300,"children":1301},{},[1302],{"type":21,"value":1303},"2x factor",{"type":21,"value":1305}," (GCC, LLVM)",{"type":16,"tag":17,"props":1307,"children":1308},{},[1309],{"type":21,"value":1310},"In some cases they might be the nice features provided directly by the C++ Standard Library. In\nother situations they might be the limitations, which require extra attention from your side or even\ncompletely new implementation.",{"type":16,"tag":17,"props":1312,"children":1313},{},[1314],{"type":21,"value":1315},"Hopefully, these details will make you a better programmer, help write more efficient C++ code, and\ndesign better data structures.",{"type":16,"tag":17,"props":1317,"children":1318},{},[1319],{"type":16,"tag":95,"props":1320,"children":1321},{},[1322],{"type":21,"value":1323},"Recommended Links:",{"type":16,"tag":87,"props":1325,"children":1326},{},[1327,1355],{"type":16,"tag":91,"props":1328,"children":1329},{},[1330,1332,1335,1341,1344,1346,1349],{"type":21,"value":1331},"\"libc++'s implementation of std::string\" by Joel Laity:",{"type":16,"tag":500,"props":1333,"children":1334},{},[],{"type":16,"tag":623,"props":1336,"children":1339},{"href":1337,"rel":1338},"https://joellaity.com/2020/01/31/string.html",[627],[1340],{"type":21,"value":1337},{"type":16,"tag":500,"props":1342,"children":1343},{},[],{"type":21,"value":1345},"Discussion on Hacker News:",{"type":16,"tag":500,"props":1347,"children":1348},{},[],{"type":16,"tag":623,"props":1350,"children":1353},{"href":1351,"rel":1352},"https://news.ycombinator.com/item?id=22198158",[627],[1354],{"type":21,"value":1351},{"type":16,"tag":91,"props":1356,"children":1357},{},[1358,1360,1363],{"type":21,"value":1359},"CppCon 2016: “The strange details of std::string at Facebook\" by Nicholas Ormrod:",{"type":16,"tag":500,"props":1361,"children":1362},{},[],{"type":16,"tag":623,"props":1364,"children":1367},{"href":1365,"rel":1366},"https://www.youtube.com/watch?v=kPR8h4-qZdk",[627],[1368],{"type":21,"value":1365},{"type":16,"tag":17,"props":1370,"children":1371},{},[1372],{"type":21,"value":1373},"TastyCode by Oleksandr Gituliar.",{"type":16,"tag":1375,"children":1376},"style",[1377],{"type":21,"value":1378},".ct-748473{color:#D73A49;}\n.ct-996399{color:#24292E;}\n.ct-970031{color:#6F42C1;}\n.ct-441542{color:#E36209;}\n.ct-531245{color:#005CC5;}",{"title":7,"searchDepth":199,"depth":199,"links":1380},[1381,1382,1383,1384],{"id":71,"depth":199,"text":74},{"id":448,"depth":199,"text":451},{"id":730,"depth":199,"text":733},{"id":1222,"depth":199,"text":1225},"markdown","content:blog:1.tasty-cpp-inside-of-std-string.md","content","blog/1.tasty-cpp-inside-of-std-string.md","md",1691422442380]