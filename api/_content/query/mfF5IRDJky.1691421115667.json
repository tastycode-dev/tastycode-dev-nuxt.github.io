[{"_path":"/blog/_0.notes","_dir":"blog","_draft":false,"_partial":true,"_locale":"","_empty":false,"title":"Random Notes and Ideas","description":"","author":"Oleksandr Gituliar","date":"2023-08-07T00:00:00.000Z","body":{"type":"root","children":[{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Media Hub: blog post + YouTube video. Draw / animate memory, data structure operations. Memory as\ntable, cache-line wide (64 bytes)."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"How costly is risk managing options in various models (PnL explain accuracy) ?"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Cloud computing in finance is worth it (for batch jobs) ? Origin: start small and scale as needed.\nMemory management = slow serialization. What is core business and competence (hint, not software\ndevelopment or hardware ops)."}]}]},{"type":"element","tag":"h2","props":{"id":"tasty-c"},"children":[{"type":"text","value":"Tasty C++"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"DateTime"}]},{"type":"text","value":" + "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"Duration"}]},{"type":"text","value":" classes"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Parser for Option Symbols (based on small user-defined strings ?)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Inside of "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::string"}]},{"type":"text","value":" / "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::map"}]},{"type":"text","value":" / "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::shared_ptr"}]},{"type":"text","value":" / "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::set"}]},{"type":"text","value":" / "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"std::vector"}]},{"type":"text","value":".\nExplain internals with step-by-step examples of various operations (and differences among most\ncommon implementations, if any)."}]}]},{"type":"element","tag":"h2","props":{"id":"quant-corner"},"children":[{"type":"text","value":"Quant Corner"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Finite Difference: Multi-center grid"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Local Volatility with FD PDE. Solve Dupire equation. Calibrate to American option prices. Switch\nto moneyness."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Interview Quants. Start with CS collegues."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Study correlation."}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"tasty-c","depth":2,"text":"Tasty C++"},{"id":"quant-corner","depth":2,"text":"Quant Corner"}]}},"_type":"markdown","_id":"content:blog:_0.notes.md","_source":"content","_file":"blog/_0.notes.md","_extension":"md"},{"_path":"/blog/_1.demo","_dir":"blog","_draft":false,"_partial":true,"_locale":"","_empty":false,"title":"Quant Corner: Finite-Difference method","description":"Finally, let's take a quick look why it's so easy to adopt finite-difference for GPU computing (at\nleast in 1D case). In general, the price of a derivative instrument can be found as a solution of an\nordinary differential equation (see Feynman–Kac\nformula).","navigation":false,"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"quant-corner-finite-difference-method"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Quant Corner"}]},{"type":"text","value":": Finite-Difference method"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Finally, let's take a quick look why it's so easy to adopt finite-difference for GPU computing (at\nleast in 1D case). In general, the price of a derivative instrument can be found as a solution of an\nordinary differential equation (see "},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Feynman%E2%80%93Kac_formula","rel":["nofollow"]},"children":[{"type":"text","value":"Feynman–Kac\nformula"}]},{"type":"text","value":")."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Pricing Equation."}]},{"type":"text","value":" For one-asset derivatives, such as american options we saw above, the\npricing differentail equation is"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\"},{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":" - \\frac{\\partial V}{\\partial t} = - r(x,t)\nV(x,t) + \\mu(x,t) \\frac{\\partial V}{\\partial x} (x,t) + \\frac{1}{2}\\sigma^2(x,t) \\frac{\\partial^2\nV}{\\partial x^2}(x,t) \\stackrel{\\text{def}}{=} \\widehat {A}_ {xx} V(x,t). \\"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Discretization."}]},{"type":"text","value":" Next, we apply "},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/Crank%E2%80%93Nicolson_method","rel":["nofollow"]},"children":[{"type":"text","value":"Crank-Nicolson\ndiscretization"}]},{"type":"text","value":" to this equation and\nget a system of linear equations for the unknown \\( V(t- \\delta t) \\) given by"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\\"},{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":" \\big(1 - \\theta , \\delta t , \\mathbb{A}_{xx}\\big) V(t - \\delta t, x) = \\big(1 + (1 - \\theta) , \\delta\nt , \\mathbb{A}_{xx} \\big) V(t,x), \\"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"where \\( \\mathbb{A}_{xx} \\) is a descrete version of the \\(\\widehat {A}_ {xx} \\) operator."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Back Propagation."}]},{"type":"text","value":" To find the current price function, \\( V(0,x) \\), we propagate back from the\nmaturity time \\(t=T \\) (when \\( V(T,x) \\) boundary condition is known) to the present time\n\\(t=0\\)."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"A pseudo-code for the final valuation looks as following:"}]},{"type":"element","tag":"code","props":{"className":["language-undefined"],"code":"θ = 1/2\nfor t in (T, T-dt, .., dt)\n    U = 1 - θ dt Axx                    //  3 x N matrix (tridiagonal)\n    Y = (1 + (1 - θ) dt Axx) V(t)       //  1 x N matrix (vector)\n\n    V(t-dt) = SolveTridiagonal(U, Y)    //  O(N), see Thomas algorithm\n\n    V(t-dt) = max(V(t-dt), payoff)      //  apply early-exercise constraint\n"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"θ = 1/2\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"for t in (T, T-dt, .., dt)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    U = 1 - θ dt Axx                    //  3 x N matrix (tridiagonal)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    Y = (1 + (1 - θ) dt Axx) V(t)       //  1 x N matrix (vector)\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":6},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    V(t-dt) = SolveTridiagonal(U, Y)    //  O(N), see Thomas algorithm\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":7},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":8},"children":[{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"    V(t-dt) = max(V(t-dt), payoff)      //  apply early-exercise constraint"}]}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For more details, see a series of lectures on \"Finite Difference Methods for Financial Partial\nDifferential Equations\" by Andreasen & Huge at "},{"type":"element","tag":"a","props":{"href":"https://github.com/brnohu/CompFin","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/brnohu/CompFin"}]},{"type":"text","value":"."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:blog:_1.demo.md","_source":"content","_file":"blog/_1.demo.md","_extension":"md"},{"_path":"/blog/_2.american-options-gpu","_dir":"blog","_draft":false,"_partial":true,"_locale":"","_empty":false,"title":"Quant Corner – Finite Difference with GPU","description":"When it comes to pricing derivatives, there are two universal methods adopted by the industry\ncapable to deal with a wide range of products. The first one is the famous Monte-Carlo method.\nAnother one is the Finite-Difference method, which we will focus on in this post today.","author":"Oleksandr Gituliar","date":"2023-08-07T00:00:00.000Z","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When it comes to pricing derivatives, there are two universal methods adopted by the industry\ncapable to deal with a wide range of products. The first one is the famous "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Monte-Carlo"}]},{"type":"text","value":" method.\nAnother one is the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Finite-Difference"}]},{"type":"text","value":" method, which we will focus on in this post today."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"What I'd like to share with you are the results of my experiment of porting a finite-difference\npricer from CPU to GPU. Since benchmarks look interesting and overall this sort of projects are not\nvery common on the web, I think it would be nice to share it with a wider audience."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Source code"}]},{"type":"text","value":" is here: "},{"type":"element","tag":"a","props":{"href":"https://github.com/gituliar/kwinto-cuda","rel":["nofollow"]},"children":[{"type":"text","value":"https://github.com/gituliar/kwinto-cuda"}]},{"type":"text","value":". It should be easy to compile on\nLinux or Windows and run your own benchmark if you have Nvidia GPU."}]},{"type":"element","tag":"h2","props":{"id":"cpu-vs-gpu"},"children":[{"type":"text","value":"CPU vs GPU"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"At first, let's take a look what theoretical benefits we can expect by switching to GPU."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"First of all, $$$, a "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"GPU is cheap"}]},{"type":"text","value":"."},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"In Apr'23, on a secondary market in Denmark I paid $250 for the AMD Ryzen 9 X5900 and only $120\nfor Nvidia GTX 1070. Remeber, that you can run multiple GPUs on a single motherboard (up to 20 on\ncrypto-mining motherboards). Finally, keep in mind that to run an extra CPU it requires an another\nmotherboard, RAM, HDD -- essentially a whole new machine (not counting for devops work to connect\nall them into a network, keep it up, manage software, etc.)."},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"All this easily gives extra 3-5x advantage in favour of GPU to start with."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"On average, a "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"GPU has ~100x more cores"}]},{"type":"text","value":" than a CPU."},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"For example, my Nvidia GTX 1070 has 1920 cores vs 12 cores on my AMD Ryzen 9 X5900, this is 160x\nmore cores. Of course, GPU cores are less powerful and run at lower frequency. But still, a\nperspective of at least 10x speedup seems realistic."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"On average, a "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"GPU has 32x more single-precision units"}]},{"type":"text","value":" than double-precision units, also known\nas Arithmetic Logic Units (ALU)."},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"In theory, this means 32x more operations per second by simply switching from "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"float"}]},{"type":"text","value":".\nToo good to be true for such a trivial change, hence worth to check on practice."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"It's time to run some benchmarks to see how these theoretical arguments relate with practice."}]},{"type":"element","tag":"h2","props":{"id":"benchmark"},"children":[{"type":"text","value":"Benchmark"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For benchmarking, we'll price american options in batches. This is usually how things are run in\npractice when risk managing real trading books. Every batch (or portfolio) contains from 256 to\n16'384 options, all different."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"American options are good candidates for this exercise for two reasons. First, there is no\nanalytical formula for the price of American options, similar to the Black-Scholes-Merton formula\nfor European options. Second, since recently there is a highly-accurate (and fast) method available\nfor pricing American options, developed by Andersen et al. [1], which we'll employ as a\ncrosscheck."}]},{"type":"element","tag":"figure","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"img","props":{"src":"/img/fd1d-gpu-b550.png"},"children":[]},{"type":"text","value":"\n  "}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In the plot above, every bin is an average over 8 consequitive batch runs, such that"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Every "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"CPU batch"}]},{"type":"text","value":" is run in a single thread (so, account for "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"theoretical speedup"}]},{"type":"text","value":" of 12x for\nRyzen 9 X5900 when run on multiple cores)."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Every "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"GPU batch"}]},{"type":"text","value":" is run on all available GPU cores."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Let's postpone to discuss these results for the summary. Now, we'd better get more confidence in the\noption prices we've generated for benchmarking."}]},{"type":"element","tag":"h2","props":{"id":"crossheck"},"children":[{"type":"text","value":"Crossheck"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Obviously, it doesn't make sense to benchmark the wrong code. To ensure that my code is correct, I\ncompare the results by pricing a portfolio of 4'495 American put options against a highly-accurate\nalgorithm of Andersen et al. Its implementation by Klaus Spanderen is available in QuantLib, see\nhis blog for more details [2]. Thank you Klaus for your contribution!"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In fact, this is the same portfolio used in [1], constructed of options by permuting all\ncombinations of\nthe following parameters (with filtering out options cheaper than 0.5):"}]},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{"align":null},"children":[{"type":"text","value":"Parameter"}]},{"type":"element","tag":"th","props":{"align":null},"children":[{"type":"text","value":"Range"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"k"}]},{"type":"text","value":" -- strike"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"100"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"s"}]},{"type":"text","value":" -- spot"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"25, 50, 80, 90, 100, 110, 120, 150, 175, 200"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"t"}]},{"type":"text","value":" -- time to maturity"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"1/12, 0.25, 0.5, 0.75, 1.0"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"z"}]},{"type":"text","value":" -- implied volatility"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"0.1, 0.2, 0.3, 0.4, 0.5, 0.6"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"r"}]},{"type":"text","value":" -- interest rate"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"2%, 4%, 6%, 8%, 10%"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"q"}]},{"type":"text","value":" -- dividend rate"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"0%, 4%, 8%, 12%"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"w"}]},{"type":"text","value":" -- parity"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"PUT"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In the table below are the crosscheck results, which contain root-mean-square (RMSE / RRMSE) and\nmaximum (MAE / MRE) absolute / relative errors."}]},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{"align":null},"children":[]},{"type":"element","tag":"th","props":{"align":null},"children":[{"type":"text","value":"CPU x32"}]},{"type":"element","tag":"th","props":{"align":null},"children":[{"type":"text","value":"CPU x64"}]},{"type":"element","tag":"th","props":{"align":null},"children":[{"type":"text","value":"GPU x32"}]},{"type":"element","tag":"th","props":{"align":null},"children":[{"type":"text","value":"GPU x64"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"RMSE"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"20.7e-4"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"5.4e-4"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"15.8e-4"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"5.4e-4"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"RRMSE"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"9.9e-5"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"8.1e-5"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"9.1e-5"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"8.1e-5"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"MAE"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"23.7e-3"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"4.3e-3"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"25.1e-3"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"4.3e-3"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"MRE"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"1.1e-3"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"1.1e-3"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"1.1e-3"}]},{"type":"element","tag":"td","props":{"align":null},"children":[{"type":"text","value":"1.1e-3"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"See Andersen et al where they compare the same portfolio with various other methods."}]},{"type":"element","tag":"h2","props":{"id":"summary"},"children":[{"type":"text","value":"Summary"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"As we saw at the beginning, a single GPU card is about "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"4x cheaper"}]},{"type":"text","value":" to run than CPU. This is\nalready a big benefit on the start. The question is whether it's faster or at least not that much\nslower."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Next, "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"10x speedup"}]},{"type":"text","value":" comes from the number of cores GPU contains. This is not 100x as we expected\nfrom theory, but still a considerable gain."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Finally, instead of expected 32x speedup by switching from "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"double"}]},{"type":"text","value":" to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"float"}]},{"type":"text","value":" we get only "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"2x\ngain"}]},{"type":"text","value":". This is very likely due to that main bottleneck is not computation itself but data transfer\n(as float-grid is 2x smaller than double-grid)."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Final verdict: GPU is at least "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"5x faster / cheaper"}]},{"type":"text","value":" than CPU to price with finite-difference."}]},{"type":"element","tag":"h2","props":{"id":"references"},"children":[{"type":"text","value":"References"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://hpcquantlib.wordpress.com/2022/10/09/high-performance-american-option-pricing","rel":["nofollow"]},"children":[{"type":"text","value":"https://hpcquantlib.wordpress.com/2022/10/09/high-performance-american-option-pricing"}]},{"type":"text","value":" by Klaus\nSpanderen"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"American options Pricing: \"High-Performance American Option Pricing\" by Andersen, Lake, Offengenden"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"cpu-vs-gpu","depth":2,"text":"CPU vs GPU"},{"id":"benchmark","depth":2,"text":"Benchmark"},{"id":"crossheck","depth":2,"text":"Crossheck"},{"id":"summary","depth":2,"text":"Summary"},{"id":"references","depth":2,"text":"References"}]}},"_type":"markdown","_id":"content:blog:_2.american-options-gpu.md","_source":"content","_file":"blog/_2.american-options-gpu.md","_extension":"md"}]